* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kai Yang"
        user-mail-address "kai.yang412@gmail.com")
#+END_SRC

* Global Settings
** Basic Setup
   - *ELISP NOTE*: =put= lets you define a value of a member of a symbol's propery list.

#+BEGIN_SRC emacs-lisp
  ;; location of lisp utilities
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load "defuns-config.el")

  ;; emacs to vim navigation
  (load "navigate.el")

  ;; clean up interface
  (defun clean-interface (&optional frame)
    (menu-bar-mode -1) ;; turn off top menu bar (file, edit, etc)
    (tool-bar-mode -1) ;; turn off tool bar
    (scroll-bar-mode -1) ;; turn off scroll bar
    )
  (add-hook 'after-make-frame-functions 'clean-interface)
  (clean-interface)

  ;; change yes/no to y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show matching parentheses
  (show-paren-mode 1)
  ;; customize its face
  ;; (set-face-background 'show-paren-match (face-background 'default))
  ;; (set-face-foreground 'show-paren-match "#def")
  ;; (set-face-attribute 'show-paren-match nil :weight 'extra-bold)

  ;; NOTE: put lets you define a value of a member of a symbol's propery list.
  ;; To enable a symbol you set the 'disabled value to nil.

  ;; turn a region of text into lower case with "C-x C-l"
  (put 'downcase-region 'disabled nil)
  ;; turn a region of text into upper case with "C-x C-u"
  (put 'upcase-region 'disabled nil)

  ;; display column number on bottom info bar
  (setq column-number-mode t)

  ;; don't display emacs startup message
  (setq inhibit-startup-message t)

  ;; allow definition/expansion of abbreviations
  ;; "C-x a g" to define a global abbreviation. simply use <SPC> to expand it
  ;; "M-x list-abbrevs" to see a list of defined abbrevs.
  (setq-default abbrev-mode 1)
  ;; don't automatically save newly defined abbreviations upon emacs exit
  (setq save-abbrevs nil)

  ;; highlight whitespace at end of lines when point is not there
  (setq-default show-trailing-whitespace t)
  (add-hook 'org-agenda-mode-hook
            (lambda () (setq show-trailing-whitespace nil)))
  (add-hook 'buffer-menu-mode-hook
            (lambda () (setq show-trailing-whitespace nil)))
  ;; define what whitespace is
  (setq whitespace-style '(face tabs spaces trailing lines-tail space-before-tab
                                newline indentation empty space-after-tab))

  ;; follow symlinks w/o messages if target is version-controlled
  ;; (b/c it's probably git, which doesn't matter)
  (setq vc-follow-symlinks t)

  ;; save clipboard to kill ring before replace
  (setq save-interprogram-paste-before-kill t)

  ;; automatically revert buffers
  (global-auto-revert-mode t)
  ;; silent auto-revert
  (setq auto-revert-verbose nil)

  ;; disable audio/visual bell
  (setq ring-bell-function 'ignore)

  ;; in dired mode, if point is on a filename then search searches only filenames
  (setq dired-isearch-filenames t)

  ;; disable tabs
  (setq-default indent-tabs-mode nil)
  ;; set tab width
  (setq-default tab-width 4)

  ;; paragraph width
  (setq-default fill-column 100)

  ;; window split threshold
  (setq split-width-threshold 200)
  (setq split-height-threshold 200)
#+END_SRC

** Built-in Packages
   - *ELISP NOTE*: =(setq <thing> ...)= is equivalent to =(set '<thing> ...)=. Symbols are always quoted.

#+BEGIN_SRC emacs-lisp
  ;; recent files menu
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)

  ;; whitespace mode
  (require 'whitespace)

  ;; dired-x (i.e.: dired extensions)
  (require 'dired-x)
#+END_SRC

** GPG

#+BEGIN_SRC emacs-lisp
  ;; have gpg prompt for passphrase in minibuffer
  (setf epa-pinentry-mode 'loopback)

  ;; cache symmetric encryption passphrase
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  (setq epa-file-select-keys (quote silent))
#+END_SRC

** Smooth Scrolling
*** Stand-alone Application
    Scroll one line at a time (less "jumpy" than defaults).

#+BEGIN_SRC emacs-lisp
  ;; one line at a time
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  ;; don't accelerate scrolling
  (setq mouse-wheel-progressive-speed nil)
  ;; scroll window under mouse
  (setq mouse-wheel-follow-mouse 't)
  ;; keyboard scroll one line at a time
  (setq scroll-step 1)
#+END_SRC

*** Terminal
    Make sure the buffer doesn't "jump" when the cursor scrolls near the ends. Applies only to the terminal.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t)
  (smooth-scrolling-mode t)
#+END_SRC

** Line Numbers
*** Setup

#+BEGIN_SRC emacs-lisp
  ;; show line numbers
  (require 'linum)
  (global-linum-mode 1)

  ;; highlight current line
  (global-hl-line-mode t)

  (custom-set-faces
   '(hl-line ((t (:background "gray29")))))
#+END_SRC

*** hlinum
    Highlights the current line number.

#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :ensure t)
  (hlinum-activate)
#+END_SRC

** iedit

#+BEGIN_SRC emacs-lisp
  ;; mark and edit all copies of the marked region simultaneously.
  (use-package iedit
    :ensure t)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  ;; linting
  (use-package flycheck
    :ensure t)
#+END_SRC

** Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq counsel-ag-base-command "ag --nocolor --nogroup --path-to-ignore ~/.ignore %s")
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))
#+END_SRC

** Company Mode
   Auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    ;; turn on company for all files
    :init (global-company-mode)
    :config
    ;; turn off company for org and markdown files
    (setq company-global-modes '(not org-mode markdown-mode))
    ;; don't show the tooltip too quickly, like when writing comments.
    ;; 0.5 sec is the default.
    (setq company-idle-delay 0.3)
    ;; don't put a lower bound on the number of characters.
    ;; activate as quickly as possible.
    ;; note that it won't activate if the line is all whitespace. that required a prefix length of 0.
    ;; set to 1 so it won't activate before words in the middle of the sentence when writing comments.
    (setq company-minimum-prefix-length 1))
#+END_SRC

*** REFERENCES
    Many of these packages are from the video series "Emacs as a C/C++ editor/IDE by user "b yuksel"
    on youtube. See: https://www.youtube.com/watch?v=HTUE03LnaXA

** Ace Window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

** dumb jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    ;;(setq dumb-jump-selector 'ivy)
    :init
    (dumb-jump-mode)
    :ensure t)
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

** helm
*** helm pages

#+BEGIN_SRC emacs-lisp
  (use-package helm-pages
    :ensure t
    :config
    (defhydra hydra-page-breaks (global-map "C-x")
      "pages"
      ("[" backward-page "backward")
      ("]" forward-page "forward")
      ("p" helm-pages "helm" :color blue)
      ("RET" nil "quit")))
#+END_SRC

*** helm flycheck

#+BEGIN_SRC emacs-lisp
  (use-package helm-flycheck
    :ensure t
    :config
    (defhydra flycheck-hydra (global-map "C-c !")
       "errors"
       ("n" flycheck-next-error "next")
       ("p" flycheck-previous-error "previous")
       ("h" helm-flycheck "helm" :color blue)
       ("q" nil "quit")))
#+END_SRC

** Misc. Packages
*** column-marker

#+BEGIN_SRC emacs-lisp
  ;; Highlight a certain column.
  (require 'column-enforce-mode)

  ;; Use "C-=" to mark a region that expands each time you activate it.
  (use-package expand-region
    :ensure t)

  ;; Deletion (forwards and backwards deletes as much whitespace as possible.
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  ;; "C-x u to see visual representation of history
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

  ;; Helps list possible following keystrokes
  (use-package which-key
    :ensure t
    :config (which-key-mode))

  ;; jump to anywhere on the screen
  (use-package avy
    :ensure t
    :bind ("C-c C-h" . avy-goto-char))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  ;; company
  (global-set-key (kbd "C-c d") 'company-show-doc-buffer)
  (global-set-key (kbd "M-RET") 'company-complete-common)

  ;; recentf
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)

  ;; expand-region
  (global-set-key (kbd "C-=") 'er/expand-region)

  ;; counsel/swiper
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-r") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-c f") 'counsel-ag)

  ;; navigation
  (global-set-key (kbd "M-n") 'next10)
  (global-set-key (kbd "M-p") 'prev10)

  ;; window management
  (global-set-key (kbd "M-o") 'other-window)

  ;; whitespace mode
  (global-set-key (kbd "C-c w") 'whitespace-mode)

  ;; column marker
  (global-set-key (kbd "C-c o") '100-column-rule)

  ;; disable zap to char
  (global-set-key (kbd "C-z") nil)

  ;; disable transpose
  (global-set-key (kbd "C-t") nil)

  ;; iedit
  (global-set-key (kbd "C-c e") 'iedit-mode)

  ;; revert buffer
  (global-set-key (kbd "C-c r") 'revert-buffer)

  ;; MELPA
  (global-set-key (kbd "C-x p") 'package-list-packages)

  ;; If having problems,
  ;; See: http://www.emacswiki.org/emacs/BackspaceKey
  ;; See: https://www.gnu.org/software/emacs/manual/html_node/efaq/Backspace-invokes-help.html
  (global-set-key (kbd "C-h") 'backward-delete-char)
  (global-set-key (kbd "M-h") 'backward-delete-word)
  ;; "C-?" fails. Sends ASCII 127?
  (global-set-key (kbd "C-x ?") 'help-command)

  ;; M-k to kill current buffer as opposed to S-k
  (global-set-key (kbd "M-k") 'kill-this-buffer)
#+END_SRC

** MacOS settings

#+BEGIN_SRC emacs-lisp
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
  ;; (use-package atom-one-dark-theme
  ;;   :ensure t
  ;;   :config (load-theme 'atom-one-dark t))
#+END_SRC

** Graphical Face Configuration

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil)
  (set-face-attribute 'mode-line-highlight nil :box nil)
  ;; To do this, you must first install patched fonts from: https://github.com/powerline/fonts
  ;; Then, you need to rename inconsolata-g since emacs doesn't allow hypens in fonts
  ;;   Refer to: https://emacs.stackexchange.com/questions/16818/cocoa-emacs-24-5-font-issues-inconsolata-dz/29397#29397
  (add-to-list 'default-frame-alist
               '(font . "InconsolataG for Powerline-12"))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :config (powerline-default-theme))
  ;; (setq powerline-image-apple-rgb t)
  (use-package smart-mode-line
    :ensure t
    :config (add-hook 'after-init-hook 'sml/setup))
#+END_SRC
* C/C++
** Basic Settings

#+BEGIN_SRC emacs-lisp
  ;; set indent width
  (setq-default c-basic-offset 4)

  ;; highlight TODO, FIXME, BUG in c files
  (add-hook 'c-mode-common-hook
            (lambda ()
              (font-lock-add-keywords
               nil
               '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
#+END_SRC

** Google C/C++ Style Guide

#+BEGIN_SRC emacs-lisp
  (use-package flymake-google-cpplint
    :ensure t
    :config
    (setq flymake-google-cpplint-command "/Users/kaiyang/anaconda3/bin/cpplint"))
  (use-package flymake-cursor
    :ensure t)

  (defun my:flymake-google-init ()
    (custom-set-variables
     '(flymake-google-cpplint-command "/Users/kaiyang/anaconda3/bin/cpplint"))
    (flymake-google-cpplint-load)
    )
  (add-hook 'c-mode-hook 'my:flymake-google-init)
  (add-hook 'c++-mode-hook 'my:flymake-google-init)

  ;; additional linting
  (use-package google-c-style
    :ensure t)

  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  (add-hook 'c++-mode-common-hook 'google-set-c-style)
  (add-hook 'c++-mode-common-hook 'google-make-newline-indent)
#+END_SRC

** Irony Mode

#+BEGIN_SRC emacs-lisp
  ;; irony mode (c/c++/obj-c autocompletion)
  ;; See: https://github.com/Sarcasm/irony-mode
  ;; FOR MAC: You need to first install llvm for libclang and cmake, which are
  ;;     used for irony-server. Use `brew install llvm --with-clang` and
  ;;     `brew install cmake`. When you first start irony-mode you need to build
  ;;     and install irony-server using {M-x irony-install-server RET}.
  ;; **** NOTE: Write a .clang_complete in project root directory with include
  ;; compiler flags to reference other files.
  (use-package irony
    :ensure t
    :config
    ;; See: https://github.com/Sarcasm/irony-mode/issues/167
    ;; FOR DEBIAN: Install libclang-3.4-dev
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :ensure t
    :config
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony)))
#+END_SRC

** ggtags

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode)
                  (ggtags-mode 1)))))
#+END_SRC

** REFERENCES
   Some packages are from the "C/C++ Development Environment for Emacs" article
   See: http://tuhdo.github.io/c-ide.html#sec-2
* Python
** elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t)
  (elpy-enable)
#+END_SRC

** jedi

#+BEGIN_SRC emacs-lisp
  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (use-package company-jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC

** ein
   emacs ipython notebook

#+BEGIN_SRC emacs-lisp
  ;; Refer to: http://millejoh.github.io/emacs-ipython-notebook/
  (use-package ein
    :ensure t
    :config
    (setq ein:jupyter-default-server-command "/Users/kaiyang/anaconda3/bin/jupyter"))
#+END_SRC

* Org Mode
** Basic Settings

#+BEGIN_SRC emacs-lisp
  ;; hide leading stars at the beginning of headings
  (setq org-hide-leading-stars t)

  ;; don't truncate lines
  (setq org-startup-truncated nil)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  ;; to get find-lisp-find-files:
  (load-library "find-lisp")
  ;; set up agenda files
  (if (eq system-type 'darwin)
      (setq org-agenda-files
            (append
             (list
              "/Users/kaiyang/Dropbox/org/projects.org"
              "/Users/kaiyang/Dropbox/org/school.org"
              "/Users/kaiyang/Dropbox/org/stuff.org"
              "/Users/kaiyang/Dropbox/org/interests.org"
              "/Users/kaiyang/Dropbox/org/refile.org")
             (find-lisp-find-files
              "/Users/kaiyang/Dropbox/org/journal"
              "\.org$"))))

  (setq org-agenda-dim-blocked-tasks t)

  (setq org-agenda-tags-column -80)

  (setq org-agenda-custom-commands
        '(("n" "Agenda and TODOs"
           ((agenda "" ((org-agenda-span 'day)))
            (todo "TODO" nil))
           nil)))

  (setq org-agenda-block-separator
        "================================================================================")
#+END_SRC

** Workflow

#+BEGIN_SRC emacs-lisp
  ;; add timestamp to DONE
  (setq org-log-done 'time)

  ;; set workflows
  (setq org-todo-keywords
        '((sequence "IDLE" "TODO(t!)" "|" "DONE(!)" "N/A(!)") ;; N/A = delegated or no longer applicable
          ))

  (setq org-enforce-todo-dependencies t)
#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (defun find-journal-file ()
    "Return filename for this month's journal"
    (format-time-string "~/Dropbox/org/journal/%Y/%B.org"))

  (setq org-capture-templates
        '(("l" "Log" entry (file+olp+datetree find-journal-file)
           "* %? :log:\n  %T")
          ("n" "Note" entry (file+datetree find-journal-file)
           "* %?\n  %U")
          ("b" "Bookmark" entry (file+olp+datetree find-journal-file)
           "* %^L%?\n  %U" :prepend t)
          ("t" "Task" entry (file+headline "~/Dropbox/org/refile.org" "Tasks")
           "* IDLE %?\n  %U" :prepend t)
          ("f" "Food" entry (file+datetree find-journal-file)
           "* %? %^G\n  :PROPERTIES:\n  :AT:\n  :WITH:\n  :END:\n  %T")))
  (add-hook 'org-capture-before-finalize-hook 'org-align-all-tags)
#+END_SRC

** Refile

#+BEGIN_SRC emacs-lisp
  ;; increase depth of refile targets
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))

  ;; Refile in a single go
  (setq org-outline-path-complete-in-steps nil)
  ;; Show full paths for refiling
  (setq org-refile-use-outline-path 'file)

  ;; allow creation of parent nodes
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** Archive

#+BEGIN_SRC emacs-lisp
  ;; ;; automatically archive when done
  ;; (defun my:archive-when-done ()
  ;;   (if (org-entry-is-done-p)
  ;;       (when (not (find "ARCHIVE" `,(org-get-tags) :test #'equal))
  ;;         (org-toggle-archive-tag))
  ;;     (when (find "ARCHIVE" `,(org-get-tags) :test #'equal)
  ;;       (org-toggle-archive-tag))
  ;;     ))

  ;; (add-hook 'org-after-todo-state-change-hook 'my:archive-when-done)

  (setq org-agenda-text-search-extra-files
        (find-lisp-find-files
          "/Users/kaiyang/Dropbox/org/"
          "\.org_archive$"))
#+END_SRC

** Tags

#+BEGIN_SRC emacs-lisp
  (setq-default org-tag-alist
                '((:startgroup)
                  ("mac")
                  (:endgroup)

                  (:startgroup)
                  ("python")
                  (:grouptags)
                  ("flask")
                  (:endgroup)

                  (:startgroup)
                  ("tech")
                  (:grouptags)
                  ("sw")
                  (:endgroup)

                  (:startgroup)
                  ("emacs")
                  (:grouptags)
                  ("org")
                  (:endgroup)

                  (:startgroup)
                  ("log")
                  (:grouptags)
                  ("read")
                  ("food")
                  (:endgroup)

                  (:startgroup)
                  ("food")
                  (:grouptags)
                  ("lunch")
                  ("dinner")
                  ("breakfast")
                  (:endgroup)

                  (:startgroup)
                  ("js")
                  (:endgroup)

                  (:startgroup)
                  ("rust")
                  (:endgroup)

                  (:startgroup)
                  ("aws")
                  (:endgroup)

                  (:startgroup)
                  ("fitness")
                  (:grouptags)
                  ("dance")
                  (:endgroup)))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c t") 'org-todo)
  (global-set-key (kbd "C-c s") 'org-schedule)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-w") 'org-refile)

  (global-set-key
   (kbd "C-c v")
   (defhydra hydra-org (:color red :hint nil)
     "
  Navigation^
  ---------------------------------------------------------
  _j_ next heading
  _k_ prev heading
  _h_ next heading (same level)
  _l_ prev heading (same level)
  _u_p higher heading
  _<tab>_ cycle subtree
  _g_o to
  "
     ("j" outline-next-visible-heading)
     ("k" outline-previous-visible-heading)
     ("h" org-forward-heading-same-level)
     ("l" org-backward-heading-same-level)
     ("u" outline-up-heading)
     ("<tab>" org-cycle)
     ("g" org-goto :exit t)))
#+END_SRC

* LaTeX

#+BEGIN_SRC emacs-lisp
  ;; (require 'latex-pretty-symbols)
#+END_SRC

* Web Mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t))
#+END_SRC

* OCaml Mode

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.ml[ily]?$" . tuareg-mode))
    (add-to-list 'auto-mode-alist '("\\.topml$" . tuareg-mode)))
#+END_SRC

* Markdown Mode

#+BEGIN_SRC emacs-lisp
  ;; ;; Two ways of previewing markdown
  ;; ;; (1) (PREFERRED) markdown-preview-mode (load upon saves). Start via "M-x m-pr-m RET"
  ;; ;; (2) impatient-mode (live preview). Toggle via "C-c C-c i"

  ;; ;; (setq markdown-preview-stylesheets
  ;; ;;       (list "http://strapdownjs.com/v/0.2/themes/united.min.css"
  ;; ;;       "http://strapdownjs.com/v/0.2/strapdown.css"
  ;; ;;       "http://strapdownjs.com/v/0.2/themes/bootstrap-responsive.min.css"))

  ;; (add-hook 'markdown-preview-mode-hook
  ;;           (lambda ()
  ;;             (set-process-query-on-exit-flag
  ;;       (get-buffer-process (current-buffer)) nil)))

  ;; (add-hook 'markdown-mode-hook 'md-hook)
  ;; (defun md-hook ()
  ;;   (define-key markdown-mode-map (kbd "M-p") #'prev5)
  ;;   (define-key markdown-mode-map (kbd "M-n") #'next5)

  ;;   (defun markdown-html (buffer)
  ;;     (princ (with-current-buffer buffer
  ;;       (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://strapdownjs.com/v/0.2/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
  ;;     (current-buffer)))

  ;;   (defun start-imp-markdown ()
  ;;     "Start the impatient mode for markdown and opens the rendering
  ;; in the user's default web browser. Note that if the web browser
  ;; wasn't running, Emacs starts it - you may want to close the
  ;; browser before Emacs in this case (Emacs will complain at quit
  ;; time otherwise)"
  ;;     (httpd-start)
  ;;     (impatient-mode 1)
  ;;     (imp-set-user-filter #'markdown-html))

  ;;   (defun stop-imp-markdown ()
  ;;     "Stop the impatient mode for markdown"
  ;;     (impatient-mode 0)
  ;;     (httpd-stop))

  ;;   (setq majoranaa-impatient-markdown 'nil)
  ;;   (defun imp-markdown-toggle ()
  ;;     "Toggle impatient markdown mode"
  ;;     (interactive)
  ;;     (if majoranaa-impatient-markdown
  ;;  (progn
  ;;    (message "Stopping impatient markdown mode")
  ;;    (stop-imp-markdown))
  ;;       (progn
  ;;  (message "Starting impatient markdown mode")
  ;;  (start-imp-markdown)))
  ;;     (setq majoranaa-impatient-markdown (not majoranaa-impatient-markdown)))

  ;;   (global-set-key (kbd "C-c C-c i") 'imp-markdown-toggle))

#+END_SRC

* Rust Mode

* Matlab Mode

* RJSX Mode

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t)
  (setq js-indent-level 2)
#+END_SRC

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x m") 'magit-blame)
    (global-set-key (kbd "C-x C-M-f") 'magit-find-file)
    (setq magit-display-file-buffer-function 'magit-display-file-buffer-other-window))
#+END_SRC

* Ensime

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t
    :config
    (setq ensime-startup-notification nil))
#+END_SRC
