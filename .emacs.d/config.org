* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kai Yang"
	user-mail-address "kai.yang412@gmail.com")
#+END_SRC

* Global Settings
** Basic Setup

#+BEGIN_SRC emacs-lisp
  ;; clean up interface
  (defun clean-interface (&optional frame)
    (menu-bar-mode -1) ;; turn off top menu bar (file, edit, etc)
    (tool-bar-mode -1) ;; turn off tool bar
    (scroll-bar-mode -1) ;; turn off scroll bar
    )
  (add-hook 'after-make-frame-functions 'clean-interface)
  (clean-interface)

  ;; don't display emacs startup message
  (setq inhibit-startup-message t)

  ;; change yes/no to y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; location of lisp utilities
  (add-to-list 'load-path "~/.emacs.d/lisp")

  ;; emacs to tmux navigation
  (load "navigate.el")

  ;; show matching parentheses
  (show-paren-mode 1)

  ;; display column number on bottom info bar
  (setq column-number-mode t)

  ;; disable tooltips
  (tooltip-mode 0)

  ;; show line numbers
  (setq-default display-line-numbers `relative)

  ;; highlight whitespace at end of lines when point is not there
  (setq-default show-trailing-whitespace nil)
  (add-hook 'prog-mode-hook
	    (lambda () (setq show-trailing-whitespace t)))
  (add-hook 'ein:notebook-mode-hook
	    (lambda ()
	      (setq show-trailing-whitespace nil)
	      (global-set-key (kbd "M-_") 'undo-tree-redo)))

  ;; window split threshold
  (setq split-width-threshold 200)
  (setq split-height-threshold 200)

  (server-start)

  ;; automatically revert buffers
  (global-auto-revert-mode t)

  ;; silent auto-revert
  (setq auto-revert-verbose nil)

  (setq-default require-final-newline 'visit-save)

  (use-package form-feed
    :ensure t
    :config
    (add-hook 'help-mode-hook 'form-feed-mode))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** Doom

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Remember to run `M-x all-the-icons-install-fonts`
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** hlinum

#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :ensure t
    :init
    (hlinum-activate))
#+END_SRC

** whitespace

#+BEGIN_SRC emacs-lisp
  ;; whitespace mode
  (global-set-key (kbd "C-c w") 'whitespace-mode)
#+END_SRC

** GPG

#+BEGIN_SRC emacs-lisp
  ;; have gpg prompt for passphrase in minibuffer
  (setf epa-pinentry-mode 'loopback)

  ;; cache symmetric encryption passphrase
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  (setq epa-file-select-keys (quote silent))
#+END_SRC

** Smooth Scrolling
   Make sure the buffer doesn't "jump" when the cursor scrolls near the ends.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :init
    (smooth-scrolling-mode t))
#+END_SRC

** iedit

#+BEGIN_SRC emacs-lisp
  ;; Don't use iedit, use lsp-mode
  ;; ;; mark and edit all copies of the marked region simultaneously.
  ;; (use-package iedit
  ;;   :ensure t
  ;;   :init (global-set-key (kbd "C-c e") 'iedit-mode))
#+END_SRC

** Column Enforce

#+BEGIN_SRC emacs-lisp
  ;; Highlight a certain column.
  (require 'column-enforce-mode)
  (setq column-enforce-column 100)
  (global-set-key (kbd "C-c o") 'column-enforce-mode)
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
  ;; Use "C-=" to mark a region that expands each time you activate it.
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Hungry Delete

#+BEGIN_SRC emacs-lisp
  ;; Deletion (forwards and backwards deletes as much whitespace as possible.
  (use-package hungry-delete
    :ensure t
    :init
    (global-hungry-delete-mode))
#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp
  ;; "C-x u to see visual representation of history
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

** Which Key

#+BEGIN_SRC emacs-lisp
  ;; Helps list possible following keystrokes
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

** PATH

#+BEGIN_SRC emacs-lisp
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin:/Library/TeX/texbin:/Users/kaiyang/anaconda3/bin"))
  ;; (setq exec-path (append exec-path '("/usr/local/bin" "/Library/TeX/texbin" "/Users/kaiyang/anaconda3/bin")))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  ;; window management
  (global-set-key (kbd "M-o") 'other-window)

  ;; disable zap to char
  (global-set-key (kbd "C-z") nil)

  ;; disable transpose
  (global-set-key (kbd "C-t") nil)

  ;; disable set-goal-column
  (global-set-key (kbd "C-x C-n") nil)

  ;; revert buffer
  (global-set-key (kbd "C-c r") 'revert-buffer)

  ;; MELPA
  (global-set-key (kbd "C-x p") 'package-list-packages)

  ;; If having problems,
  ;; See: http://www.emacswiki.org/emacs/BackspaceKey
  ;; See: https://www.gnu.org/software/emacs/manual/html_node/efaq/Backspace-invokes-help.html
  (global-set-key (kbd "C-h") 'hungry-delete-backward)
  (global-set-key (kbd "M-h") 'backward-kill-word)
  ;; "C-?" fails. Sends ASCII 127?
  (global-set-key (kbd "C-x ?") 'help-command)

  ;; M-k to kill current buffer as opposed to S-k
  (global-set-key (kbd "M-k") 'kill-this-buffer)

  ;; emacs to tmux
  (global-set-key
   (kbd "C-M-h")
   (lambda ()
     (interactive)
     (tmux-navigate "left")))
  (global-set-key
   (kbd "C-M-j")
   (lambda ()
     (interactive)
     (tmux-navigate "down")))
  (global-set-key
   (kbd "C-M-k")
   (lambda ()
     (interactive)
     (tmux-navigate "up")))
  (global-set-key
   (kbd "C-M-l")
   (lambda ()
     (interactive)
     (tmux-navigate "right")))

  (global-set-key (kbd "C-S-k") 'kill-whole-line)
#+END_SRC

* Tools

** Neotree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (global-set-key (kbd "C-x C-t") 'neotree-projectile-action))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init
    (ivy-mode 1)
    (counsel-mode)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    (global-set-key [remap org-set-tags-command] #'counsel-org-tag)
    :bind
    ("C-s" . swiper)
    ("C-r" . swiper))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :init
    (counsel-projectile-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** dumb jump

#+BEGIN_SRC emacs-lisp
  ;; Don't use dumb-jump, use lsp-mode
  ;; (use-package dumb-jump
  ;;   :init
  ;;   (dumb-jump-mode)
  ;;   (setq dumb-jump-selector 'ivy)
  ;;   :ensure t)
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
  ;; jump to anywhere on the screen
  (use-package avy
    :ensure t
    :bind ("C-c C-h" . avy-goto-char)
    :config
    (setq avy-background t)
    (setq avy-keys (number-sequence ?a ?z)))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x m") 'magit-blame)
    (global-set-key (kbd "C-x C-M-f") 'magit-find-file)
    (setq magit-display-file-buffer-function 'magit-display-file-buffer-other-window))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** LSP Mode

#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :commands lsp
  ;;   :bind
  ;;   ("C-c f" . lsp-format-buffer)
  ;;   ("C-M-g" . lsp-find-definition)
  ;;   ("C-M-e" . lsp-find-references)
  ;;   ("C-c e" . lsp-rename)
  ;;   :init
  ;;   (add-hook 'prog-mode-hook #'lsp)
  ;;   (setq lsp-prefer-flymake nil)
  ;;   (setq lsp-enable-indentation nil)
  ;;   (setq lsp-enable-snippet nil))

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :commands lsp-ui-mode
  ;;   :bind
  ;;   ("C-c d" . lsp-ui-doc-show)
  ;;   :init
  ;;   (add-hook 'prog-mode-hook 'flycheck-mode)
  ;;   :config
  ;;   (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  ;;   (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)
  ;;   (global-set-key (kbd "C-x l") 'lsp-ui-mode))

  ;; (use-package company-lsp
  ;;   :ensure t
  ;;   :commands company-lsp
  ;;   :config
  ;;   (define-key company-active-map (kbd "C-m") #'company-show-doc-buffer)
  ;;   (setq company-idle-delay 0.1))
#+END_SRC

* Languages

** Matlab

#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(cons
	 '("\\.m$" . octave-mode)
	 auto-mode-alist))
#+END_SRC

** Python

*** ein
    emacs ipython notebook

#+BEGIN_SRC emacs-lisp
  ;; Refer to: http://millejoh.github.io/emacs-ipython-notebook/
  (use-package ein
    :ensure t
    :init
    (define-key ein:notebook-mode-map (kbd "C-c C-h") 'avy-goto-char)
    (define-key ein:notebook-mode-map (kbd "C-c C-d") 'ein:pytools-request-tooltip-or-help))
#+END_SRC

*** python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable)
    ;; https://emacs.stackexchange.com/questions/20092/using-conda-environments-in-emacs
    (setenv "WORKON_HOME" "/Users/kaiyang/anaconda3/envs")
    (define-key inferior-python-mode-map (kbd "C-M-l") nil)
    (custom-set-faces
     '(highlight-indentation-face ((t (:background "gray25")))))
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (define-key elpy-mode-map (kbd "C-c f") 'elpy-format-code)
    (setq python-shell-completion-native-enable nil)
    (setq elpy-rpc-timeout 10)
    (setq elpy-rpc-virtualenv-path 'current))
#+END_SRC

** Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :config
    (setq lua-indent-level 2))
#+END_SRC

** yaml

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)

  (use-package docker-compose-mode
    :ensure t)
#+END_SRC

** Bazel

#+BEGIN_SRC emacs-lisp
  (use-package bazel-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("BUILD" . bazel-mode)))
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :config
    (setq typescript-indent-level 2))
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

** Protobuf

#+BEGIN_SRC emacs-lisp
  (use-package protobuf-mode
    :ensure t)
#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp
  (use-package ensime
    :ensure t)
#+END_SRC

* Org Mode
** Basic Settings

#+BEGIN_SRC emacs-lisp
  (require 'org-habit)
  (setq org-habit-graph-column 65)

  ;; don't truncate lines
  (setq org-startup-truncated t)

  (setq org-list-description-max-indent 5)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
	(list
	 "/Users/kaiyang/Dropbox/org/fitness.org"
	 "/Users/kaiyang/Dropbox/org/journal.org"
	 "/Users/kaiyang/Dropbox/org/interests.org"
	 "/Users/kaiyang/Dropbox/org/inbox.org"
	 "/Users/kaiyang/Dropbox/org/stuff.org"
	 "/Users/kaiyang/Dropbox/org/notes.org"
	 "/Users/kaiyang/org/inbox.org"
	 "/Users/kaiyang/org/stuff.org"
	 "/Users/kaiyang/org/journal.org"
	 "/Users/kaiyang/org/tasks.org"
	 ))

  (setq org-agenda-dim-blocked-tasks t)

  (setq org-agenda-tags-column -95)

  (setq org-agenda-custom-commands
	'(("n" "TSIQ Agenda and TODOs"
	   ((agenda "" ((org-agenda-span 'day)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Unscheduled TODOs")
		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Inbox")
		   (org-agenda-files '("/Users/kaiyang/org/inbox.org")))))
	   ((org-agenda-files
	     '("/Users/kaiyang/org/inbox.org"
	       "/Users/kaiyang/org/stuff.org"
	       "/Users/kaiyang/org/journal.org"
	       "/Users/kaiyang/org/tasks.org"))))
	  ("i" "TSIQ Backlog" todo "IDLE"
	   ((org-agenda-files
	     '("/Users/kaiyang/org/inbox.org"
	       "/Users/kaiyang/org/stuff.org"
	       "/Users/kaiyang/org/journal.org"
	       "/Users/kaiyang/org/tasks.org"))))
	  ("N" "Personal Agenda and TODOs"
	   ((agenda "" ((org-agenda-span 'day)))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Unscheduled TODOs")
		   (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))
	    (todo "TODO"
		  ((org-agenda-overriding-header "Inbox")
		   (org-agenda-files '("/Users/kaiyang/Dropbox/org/inbox.org")))))
	   ((org-agenda-files
	     '("/Users/kaiyang/Dropbox/org/fitness.org"
	       "/Users/kaiyang/Dropbox/org/journal.org"
	       "/Users/kaiyang/Dropbox/org/interests.org"
	       "/Users/kaiyang/Dropbox/org/inbox.org"
	       "/Users/kaiyang/Dropbox/org/stuff.org"))))
	  ("I" "Personal Backlog" todo "IDLE"
	   ((org-agenda-files
	     '("/Users/kaiyang/Dropbox/org/fitness.org"
	       "/Users/kaiyang/Dropbox/org/journal.org"
	       "/Users/kaiyang/Dropbox/org/interests.org"
	       "/Users/kaiyang/Dropbox/org/inbox.org"
	       "/Users/kaiyang/Dropbox/org/stuff.org"))))))

  (setq org-agenda-block-separator
	"================================================================================")

  (setq org-agenda-timegrid-use-ampm 1)
#+END_SRC

** Workflow

#+BEGIN_SRC emacs-lisp
  ;; add timestamp to DONE
  (setq org-log-done 'time)

  ;; set workflows
  (setq org-todo-keywords
	'((sequence "TODO" "|" "DONE" "N/A") ;; applicable to habits
	  (sequence "IDLE" "TODO" "|" "DONE" "N/A") ;; N/A = delegated or no longer applicable
	  (sequence "IDLE" "IN-PROGRESS" "|" "DONE" "N/A") ;; applicable to projects/epics
	  ))

  (setq org-enforce-todo-dependencies t)
#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	'(("l" "Log" entry (file+olp+datetree "~/org/journal.org")
	   "* %?\n  %T")
	  ("n" "Note" entry (file+headline "~/org/inbox.org" "Notes")
	   "* %?\n  %U")
	  ("t" "Task" entry (file+headline "~/org/inbox.org" "Tasks")
	   "* TODO %?\n  %U" :prepend t)
	  ("f" "Food" entry (file+olp+datetree "~/Dropbox/org/journal.org")
	   "* %? %^G\n  :PROPERTIES:\n  :AT:\n  :END:\n  %T")
	  ("p" "Personal Log" entry (file+olp+datetree "~/Dropbox/org/journal.org")
	   "* %?\n  %T")))
  (add-hook 'org-capture-before-finalize-hook 'org-align-all-tags)
#+END_SRC

** Refile

#+BEGIN_SRC emacs-lisp
  ;; increase depth of refile targets
  (setq org-refile-targets '((nil :maxlevel . 9)
			     (org-agenda-files :maxlevel . 9)))

  ;; Refile in a single go
  (setq org-outline-path-complete-in-steps nil)
  ;; Show full paths for refiling
  (setq org-refile-use-outline-path 'file)

  ;; allow creation of parent nodes
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** Tags

#+BEGIN_SRC emacs-lisp
  (setq-default org-tag-alist
		'((:startgroup)
		  ("food")
		  (:grouptags)
		  ("lunch")
		  ("dinner")
		  ("breakfast")
		  (:endgroup)

		  (:startgroup)
		  ("read")
		  (:endgroup)

                  (:startgroup)
                  ("insurance")
                  (:grouptags)
                  ("gl")
                  (:endgroup)
                  ))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c t") 'org-todo)
  (global-set-key (kbd "C-c s") 'org-schedule)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-w") 'org-refile)
  (global-set-key (kbd "C-x M-p") 'org-latex-export-to-pdf)
#+END_SRC

** Auto-fill Mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (setq fill-column 100)))
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC
