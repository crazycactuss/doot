* Personal Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kai Yang"
	user-mail-address "kai.yang412@gmail.com")
#+END_SRC

* Global Settings
** Basic Setup

#+BEGIN_SRC emacs-lisp
  ;; clean up interface
  (defun clean-interface (&optional frame)
    (menu-bar-mode -1) ;; turn off top menu bar (file, edit, etc)
    (tool-bar-mode -1) ;; turn off tool bar
    (scroll-bar-mode -1) ;; turn off scroll bar
    )
  (add-hook 'after-make-frame-functions 'clean-interface)
  (clean-interface)

  ;; don't display emacs startup message
  (setq inhibit-startup-message t)

  ;; change yes/no to y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; location of lisp utilities
  (add-to-list 'load-path "~/.emacs.d/lisp")

  ;; emacs to tmux navigation
  (load "navigate.el")

  ;; show matching parentheses
  (show-paren-mode 1)

  ;; display column number on bottom info bar
  (setq column-number-mode t)

  ;; disable tooltips
  (tooltip-mode 0)

  ;; show line numbers
  (global-linum-mode 1)

  ;; highlight whitespace at end of lines when point is not there
  (setq-default show-trailing-whitespace t)
  (add-hook 'org-agenda-mode-hook
	    (lambda () (setq show-trailing-whitespace nil)))
  (add-hook 'buffer-menu-mode-hook
	    (lambda () (setq show-trailing-whitespace nil)))

  ;; window split threshold
  (setq split-width-threshold 200)
  (setq split-height-threshold 200)
#+END_SRC

** Doom

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Remember to run `M-x all-the-icons-install-fonts`
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** hlinum

#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :ensure t
    :init
    (hlinum-activate))
#+END_SRC

** whitespace

#+BEGIN_SRC emacs-lisp
  ;; whitespace mode
  (global-set-key (kbd "C-c w") 'whitespace-mode)
#+END_SRC

** GPG

#+BEGIN_SRC emacs-lisp
  ;; have gpg prompt for passphrase in minibuffer
  (setf epa-pinentry-mode 'loopback)

  ;; cache symmetric encryption passphrase
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)

  (setq epa-file-select-keys (quote silent))
#+END_SRC

** Smooth Scrolling
   Make sure the buffer doesn't "jump" when the cursor scrolls near the ends.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :init
    (smooth-scrolling-mode t))
#+END_SRC

** iedit

#+BEGIN_SRC emacs-lisp
  ;; mark and edit all copies of the marked region simultaneously.
  (use-package iedit
    :ensure t
    :init (global-set-key (kbd "C-c e") 'iedit-mode))
#+END_SRC

** Column Enforce

#+BEGIN_SRC emacs-lisp
  ;; Highlight a certain column.
  (require 'column-enforce-mode)
  (setq column-enforce-column 100)
  (global-set-key (kbd "C-c o") 'column-enforce-mode)
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
  ;; Use "C-=" to mark a region that expands each time you activate it.
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Hungry Delete

#+BEGIN_SRC emacs-lisp
  ;; Deletion (forwards and backwards deletes as much whitespace as possible.
  (use-package hungry-delete
    :ensure t
    :init
    (global-hungry-delete-mode))
#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp
  ;; "C-x u to see visual representation of history
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

** Which Key

#+BEGIN_SRC emacs-lisp
  ;; Helps list possible following keystrokes
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

** PATH

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  ;; window management
  (global-set-key (kbd "M-o") 'other-window)

  ;; disable zap to char
  (global-set-key (kbd "C-z") nil)

  ;; disable transpose
  (global-set-key (kbd "C-t") nil)

  ;; revert buffer
  (global-set-key (kbd "C-c r") 'revert-buffer)

  ;; MELPA
  (global-set-key (kbd "C-x p") 'package-list-packages)

  ;; If having problems,
  ;; See: http://www.emacswiki.org/emacs/BackspaceKey
  ;; See: https://www.gnu.org/software/emacs/manual/html_node/efaq/Backspace-invokes-help.html
  (global-set-key (kbd "C-h") 'backward-delete-char)
  (global-set-key (kbd "M-h") 'backward-delete-word)
  ;; "C-?" fails. Sends ASCII 127?
  (global-set-key (kbd "C-x ?") 'help-command)

  ;; M-k to kill current buffer as opposed to S-k
  (global-set-key (kbd "M-k") 'kill-this-buffer)

  ;; emacs to tmux
  (global-set-key
   (kbd "C-M-h")
   (lambda ()
     (interactive)
     (tmux-navigate "left")))
  (global-set-key
   (kbd "C-M-j")
   (lambda ()
     (interactive)
     (tmux-navigate "down")))
  (global-set-key
   (kbd "C-M-k")
   (lambda ()
     (interactive)
     (tmux-navigate "up")))
  (global-set-key
   (kbd "C-M-l")
   (lambda ()
     (interactive)
     (tmux-navigate "right")))
#+END_SRC

* Tools

** Neotree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (global-set-key (kbd "C-x C-t") 'neotree-projectile-action))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

** Ivy/Counsel/Swiper

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init
    (ivy-mode 1)
    (counsel-mode)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-initial-inputs-alist nil)
    :bind
    ("C-s" . swiper)
    ("C-r" . swiper))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :init
    (counsel-projectile-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** dumb jump

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :init
    (dumb-jump-mode)
    (setq dumb-jump-selector 'ivy)
    :ensure t)
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
  ;; jump to anywhere on the screen
  (use-package avy
    :ensure t
    :bind ("C-c C-h" . avy-goto-char))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x m") 'magit-blame)
    (global-set-key (kbd "C-x C-M-f") 'magit-find-file)
    (setq magit-display-file-buffer-function 'magit-display-file-buffer-other-window))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** LSP Mode

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :bind
    ("C-c f" . lsp-format-buffer)
    :init
    (add-hook 'prog-mode-hook #'lsp)
    (setq lsp-prefer-flymake nil))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :bind
    ("C-c d" . lsp-ui-doc-show)
    :init
    (add-hook 'prog-mode-hook 'flycheck-mode)
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

  (use-package company-lsp
    :ensure t
    :commands company-lsp
    :config
    (define-key company-active-map (kbd "C-m") #'company-show-doc-buffer))
#+END_SRC

* Languages

** Matlab

#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
	(cons
	 '("\\.m$" . octave-mode)
	 auto-mode-alist))
#+END_SRC

** Python

*** ein
    emacs ipython notebook

#+BEGIN_SRC emacs-lisp
  ;; Refer to: http://millejoh.github.io/emacs-ipython-notebook/
  (use-package ein
    :ensure t)
#+END_SRC

* Org Mode
** Basic Settings

#+BEGIN_SRC emacs-lisp
  (require 'org-habit)
  (setq org-habit-graph-column 70)
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
	(list
	 "/Users/kaiyang/Dropbox/org/fitness.org"
	 "/Users/kaiyang/Dropbox/org/food.org"
	 "/Users/kaiyang/Dropbox/org/journal.org"
	 "/Users/kaiyang/Dropbox/org/interests.org"
	 "/Users/kaiyang/Dropbox/org/refile.org"
	 ))

  (setq org-agenda-dim-blocked-tasks t)

  (setq org-agenda-tags-column -100)

  (setq org-agenda-custom-commands
	'(("n" "Agenda and TODOs"
	   ((agenda "" ((org-agenda-span 'day)))
	    (todo "TODO" nil))
	   nil)))

  (setq org-agenda-block-separator
	"================================================================================")
#+END_SRC

** Workflow

#+BEGIN_SRC emacs-lisp
  ;; add timestamp to DONE
  (setq org-log-done 'time)

  ;; set workflows
  (setq org-todo-keywords
	'((sequence "IDLE" "TODO" "|" "DONE" "N/A") ;; N/A = delegated or no longer applicable
	  ))

  (setq org-enforce-todo-dependencies t)
#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	'(("l" "Log" entry (file+olp+datetree "~/Dropbox/org/journal.org")
	   "* %? :log:\n  %T")
	  ("n" "Note" entry (file+headline "~/Dropbox/org/refile.org" "Notes")
	   "* %?\n  %U")
	  ("t" "Task" entry (file+headline "~/Dropbox/org/refile.org" "Tasks")
	   "* IDLE %?\n  %U" :prepend t)
	  ("f" "Food" entry (file+olp+datetree "~/Dropbox/org/journal.org")
	   "* %? %^G\n  :PROPERTIES:\n  :AT:\n  :WITH:\n  :END:\n  %T")))
  (add-hook 'org-capture-before-finalize-hook 'org-align-all-tags)
#+END_SRC

** Refile

#+BEGIN_SRC emacs-lisp
  ;; increase depth of refile targets
  (setq org-refile-targets '((nil :maxlevel . 9)
			     (org-agenda-files :maxlevel . 9)))

  ;; Refile in a single go
  (setq org-outline-path-complete-in-steps nil)
  ;; Show full paths for refiling
  (setq org-refile-use-outline-path 'file)

  ;; allow creation of parent nodes
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** Tags

#+BEGIN_SRC emacs-lisp
  (setq-default org-tag-alist
		'((:startgroup)
		  ("tech")
		  (:grouptags)
		  ("sw")
		  (:endgroup)

		  (:startgroup)
		  ("food")
		  (:grouptags)
		  ("lunch")
		  ("dinner")
		  ("breakfast")
		  (:endgroup)))
#+END_SRC

** Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c t") 'org-todo)
  (global-set-key (kbd "C-c s") 'org-schedule)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c C-w") 'org-refile)
#+END_SRC
